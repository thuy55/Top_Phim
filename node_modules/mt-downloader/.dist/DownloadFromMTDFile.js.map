{"version":3,"sources":["../src/DownloadFromMTDFile.js"],"names":["DownloadFromMTDFile","curryN","FILE","HTTP","mtdPath","_meta","fd$","open","just","size$","metaPosition$","meta$","position$","map","meta","merge","response$","buffer$","share","responses$","bufferWritten$","nMeta$","metaWritten$","write","pluck","localFileSize$","fdR$"],"mappings":"AAAA;;;;AAIA;;;;;;;AAEA;;AACA;;AACA;;;;AACA;;;;AAeA;;;;;;;;;;;;;;;;AAgBO,MAAMA,oDAAsB,gBAAEC,MAAF,CAAS,CAAT,EAAY,CAAC,EAACC,IAAD,EAAOC,IAAP,EAAD,EAAeC,OAAf,EAAwBC,KAAxB,KAAkC;AAC/E;;;AAGA,QAAMC,MAAMJ,KAAKK,IAAL,CAAU,eAAEC,IAAF,CAAO,CAACJ,OAAD,EAAU,IAAV,CAAP,CAAV,CAAZ;;AAEA;;;AAGA,QAAMK,QAAQ,2BAAe,EAACP,IAAD,EAAOI,GAAP,EAAf,CAAd;;AAEA;;;AAGA,QAAMI,gBAAgB,0BAAc,EAACD,KAAD,EAAd,CAAtB;AACA,QAAME,QAAQ,sBAAU,EAACT,IAAD,EAAOI,GAAP,EAAYM,WAAWF,aAAvB,EAAV,EACXG,GADW,CACPC,QAAQ,gBAAEC,KAAF,CAAQD,IAAR,EAAcT,KAAd,CADD,CAAd;;AAGA;;;AAGA,QAAM,EAACW,SAAD,EAAYC,OAAZ,KAAuB,qBAC3B,CAAC,SAAD,EAAY,WAAZ,CAD2B,EACD,4BAAgBd,IAAhB,EAAsBQ,KAAtB,EAA6BO,KAA7B,EADC,CAA7B;;AAIA;;;AAGA,QAAMC,aAAa,oBAAQR,MAAME,GAAN,uBAAR,EAAmCG,SAAnC,CAAnB;;AAEA;;;AAGA,QAAMI,iBAAiB,wBAAY,EAAClB,IAAD,EAAOI,GAAP,EAAYW,OAAZ,EAAZ,CAAvB;;AAEA;;;AAGA,QAAMI,SAAS,2BAAe,EAACV,KAAD,EAAQS,cAAR,EAAf,CAAf;;AAEA;;;AAGA,QAAME,eAAepB,KAAKqB,KAAL,CAAW,sCAA0B;AACxDjB,OADwD;AAExDW,aAAS,wBAAY,+BAAmBN,MAAMa,KAAN,CAAY,WAAZ,CAAnB,EAA6CH,MAA7C,CAAZ,CAF+C;AAGxDT,eAAWH;AAH6C,GAA1B,CAAX,CAArB;;AAMA;;;AAGA,SAAO,gBAAI;AACTa,gBADS;AAETN,aAFS;AAGTG,cAHS;AAITM,oBAAgBhB,KAJP;AAKTiB,UAAMpB,GALG;AAMTI,iBANS;AAOTC,WAAO,eAAEI,KAAF,CAAQM,MAAR,EAAgBV,KAAhB;AAPE,GAAJ,CAAP;AASD,CA7DkC,CAA5B","file":"DownloadFromMTDFile.js","sourcesContent":["/**\n * Created by tushar.mathur on 29/06/16.\n */\n\n'use strict'\n\nimport {mux} from 'muxer'\nimport {Observable as O} from 'rx'\nimport R from 'ramda'\nimport {\n  CreateWriteBufferAtParams,\n  JSToBuffer$,\n  LocalFileSize$,\n  MetaPosition$,\n  ReadJSON$,\n  demuxFPH,\n  RequestWithMeta,\n  WriteBuffer,\n  SetMetaOffsets,\n  RxThrottleComplete,\n  RxTakeN,\n  GetThreadCount\n} from './Utils'\n\n/**\n * Reads a `.mtd` file and resumes the download from the last successfully saved\n * byte.\n * @function\n * @param {String} mtdPath - Relative path to the `.mtd` file.\n * @param {Object} [meta] - Optional meta data to override the one that's being\n * loaded from the `.mtd` file.\n * @return {external:Observable}\n * A {@link https://github.com/tusharmath/muxer multiplexed stream} containing ~\n * - `metaWritten$` - Meta data buffer stream.\n * - `response$` - HTTP response object.\n * - `responses$` - List of all the HTTP response objects.\n * - `localFileSize$` - Size of the `.mtd` file on disk.\n * - `fdR$` - File Descriptor in `r+` mode.\n * - `meta$` - Download meta information.\n */\nexport const DownloadFromMTDFile = R.curryN(2, ({FILE, HTTP}, mtdPath, _meta) => {\n  /**\n   * Open file to read+append\n   */\n  const fd$ = FILE.open(O.just([mtdPath, 'r+']))\n\n  /**\n   * Retrieve File size on disk\n   */\n  const size$ = LocalFileSize$({FILE, fd$})\n\n  /**\n   * Retrieve Meta info\n   */\n  const metaPosition$ = MetaPosition$({size$})\n  const meta$ = ReadJSON$({FILE, fd$, position$: metaPosition$})\n    .map(meta => R.merge(meta, _meta))\n\n  /**\n   * Make a HTTP request for each thread\n   */\n  const {response$, buffer$} = demuxFPH(\n    ['buffer$', 'response$'], RequestWithMeta(HTTP, meta$).share()\n  )\n\n  /**\n   * Select all the responses\n   */\n  const responses$ = RxTakeN(meta$.map(GetThreadCount), response$)\n\n  /**\n   * Create write params and save buffer+offset to disk\n   */\n  const bufferWritten$ = WriteBuffer({FILE, fd$, buffer$})\n\n  /**\n   * Update META info\n   */\n  const nMeta$ = SetMetaOffsets({meta$, bufferWritten$})\n\n  /**\n   * Persist META to disk\n   */\n  const metaWritten$ = FILE.write(CreateWriteBufferAtParams({\n    fd$,\n    buffer$: JSToBuffer$(RxThrottleComplete(meta$.pluck('metaWrite'), nMeta$)),\n    position$: size$\n  }))\n\n  /**\n   * Create sink$\n   */\n  return mux({\n    metaWritten$,\n    response$,\n    responses$,\n    localFileSize$: size$,\n    fdR$: fd$,\n    metaPosition$,\n    meta$: O.merge(nMeta$, meta$)\n  })\n})\n"]}