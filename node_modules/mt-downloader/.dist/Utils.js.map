{"version":3,"sources":["../src/Utils.js"],"names":["Rx","first","nth","second","trace","curry","msg","value","console","log","demuxFP","list","$","demuxFPH","head","BUFFER_SIZE","NormalizePath","path","resolve","process","cwd","GenerateFileName","x","last","parse","pathname","split","Date","now","ResolvePath","compose","SplitRange","totalBytes","range","delta","Math","round","start","times","end","zip","CreateRangeHeader","SetRangeHeader","request","set","lensPath","omit","CreateRequestParams","meta","index","offsets","threads","ToBuffer","size","str","buffer","CreateFilledBuffer","write","fill","Buffer","MTDPath","MergeDefaultOptions","options","mergeAll","metaWrite","mtdPath","prop","GetOffset","GetThread","GetThreadStart","curryN","GetThreadEnd","GetThreadCount","length","TimesCount","identity","GetBufferWriteOffset","buffer$","initialOffset","accumulator","_buffer","_offset","scan","SetBufferParams","addParams","map","append","RequestThread","HTTP","pluck","HttpRequest","response$","data$","ToJSON$","source$","JSON","stringify","bind","ToBuffer$","JSToBuffer$","BufferToJS$","toString","RemoteFileSize$","requestHead","parseInt","LocalFileSize$","FILE","fd$","fstat","of","PickFirst","CreateMeta$","size$","isFinite","merge","ReadFileAt$","position$","readParams$","combineLatest","toParam","position","fd","read","MetaPosition$","add","CreateWriteBufferAtParams","CreateWriteBufferParams","just","unnest","SetMetaOffsets","meta$","bufferWritten$","offsetLens","thread","lensProp","lensIndex","start$","len","zipObj","withLatestFrom","objOf","previous","current","pMeta","oldVal","lens","skip","ReadJSON$","IsOffsetInRange","i","lte","gt","inRange","allPass","FlattenMeta$","flatMap","MergeMeta","IsValid","filter","RxThrottleComplete","window$","sh","selector","window","throttle","IsCompleted$","offsetsA","offsetsB","subtract","apply","diff","all","isComplete","converge","distinctUntilChanged","TapBetween","min","max","Completion","tap0To100","total","downloaded","sum","ceil","WriteBuffer","Write","params","concat","RequestWithMeta","uncurryN","DOWNLOAD_TYPES","NEW","OLD","RemoveExtension","replace","GetDownloadType","options$","MergeType","type","GetPathFromURL","GetPathFromFile","GetMtdPathFromPath","MetaAssoc","T","assoc","setPathFromURL","setPathFromFile","setMtdPath","ok$","not$","partition","url","CliValidOptions","anyPass","has","RxTakeN","n$","accum","memory","count","equals","take"],"mappings":"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","file":"Utils.js","sourcesContent":["/**\n * Created by tushar.mathur on 22/01/16.\n */\n\n'use strict'\n\nimport PATH from 'path'\nimport URL from 'url'\nimport {Observable as O} from 'rx'\nimport R from 'ramda'\nimport * as Rx from './RxFP'\nimport {mux, demux} from 'muxer'\nimport {MTDError, FILE_SIZE_UNKNOWN} from './Error'\n\nconst first = R.nth(0)\nconst second = R.nth(1)\nexport const trace = R.curry((msg, value) => {\n  console.log(msg, value)\n  return value\n})\nexport const demuxFP = R.curry((list, $) => demux($, ...list))\nexport const demuxFPH = R.curry((list, $) => R.head(demux($, ...list)))\nexport const BUFFER_SIZE = 1024 * 4\nexport const NormalizePath = (path) => PATH.resolve(process.cwd(), path)\nexport const GenerateFileName = (x) => {\n  return R.last(URL.parse(x).pathname.split('/')) || Date.now()\n}\nexport const ResolvePath = R.compose(NormalizePath, GenerateFileName)\nexport const SplitRange = (totalBytes, range) => {\n  const delta = Math.round(totalBytes / range)\n  const start = R.times((x) => x * delta, range)\n  const end = R.times((x) => (x + 1) * delta - 1, range)\n  end[range - 1] = totalBytes\n  return R.zip(start, end)\n}\nexport const CreateRangeHeader = ([start, end]) => `bytes=${start}-${end}`\nexport const SetRangeHeader = ({request, range}) => {\n  return R.set(\n    R.lensPath(['headers', 'range']),\n    CreateRangeHeader(range),\n    R.omit(['threads', 'offsets'], request)\n  )\n}\nexport const CreateRequestParams = ({meta, index}) => {\n  const range = [meta.offsets[index], second(meta.threads[index])]\n  return SetRangeHeader({request: meta, range})\n}\nexport const ToBuffer = R.curry((size, str) => {\n  var buffer = CreateFilledBuffer(size)\n  buffer.write(str)\n  return buffer\n})\nexport const CreateFilledBuffer = (size = BUFFER_SIZE, fill = ' ') => {\n  const buffer = new Buffer(size)\n  buffer.fill(fill)\n  return buffer\n}\nexport const MTDPath = (path) => path + '.mtd'\nexport const MergeDefaultOptions = (options) => R.mergeAll([\n  {range: 3, metaWrite: 300},\n  {mtdPath: MTDPath(R.prop('path', options))},\n  options\n])\n\n// TODO: Use R.lens instead\nexport const GetOffset = R.curry((meta, index) => meta.offsets[index])\nexport const GetThread = R.curry((meta, index) => meta.threads[index])\nexport const GetThreadStart = R.curryN(2, R.compose(R.nth(0), GetThread))\nexport const GetThreadEnd = R.curryN(2, R.compose(R.nth(1), GetThread))\nexport const GetThreadCount = R.compose(R.length, R.prop('threads'))\nexport const TimesCount = R.times(R.identity)\n\n/*\n * STREAM BASED\n */\nexport const GetBufferWriteOffset = ({buffer$, initialOffset}) => {\n  const accumulator = ([_buffer, _offset], buffer) => [buffer, _buffer.length + _offset]\n  return buffer$.scan(accumulator, [{length: 0}, initialOffset])\n}\nexport const SetBufferParams = ({buffer$, index, meta}) => {\n  const initialOffset = GetOffset(meta, index)\n  const addParams = R.compose(Rx.map(R.append(index)), GetBufferWriteOffset)\n  return addParams({buffer$, initialOffset})\n}\n\n/**\n * Makes an HTTP request using the {HttpRequest} function and appends the\n * buffer response with appropriate write position and thread index.\n * @function\n * @private\n * @param {Object} HTTP - HTTP transformer\n * @param {function} HTTP.request - HTTP request function\n * @param {Object} r - a dict of meta and selected thread index\n * @param {Object} r.meta - the download meta info\n * @param {Object} r.index - index of the selected thread\n * @returns {Observable} a muxed {buffer$, response$}\n */\nexport const RequestThread = R.curry((HTTP, {meta, index}) => {\n  const pluck = demuxFPH(['data$', 'response$'])\n  const HttpRequest = R.compose(HTTP.request, CreateRequestParams)\n  const {response$, data$} = pluck(HttpRequest({meta, index}))\n  const buffer$ = SetBufferParams({buffer$: data$, meta, index})\n  return mux({buffer$, response$})\n})\nexport const ToJSON$ = source$ => source$.map(JSON.stringify.bind(JSON))\nexport const ToBuffer$ = source$ => source$.map(ToBuffer(BUFFER_SIZE))\nexport const JSToBuffer$ = R.compose(ToBuffer$, ToJSON$)\nexport const BufferToJS$ = buffer$ => {\n  return buffer$.map(buffer => JSON.parse(buffer.toString()))\n}\nexport const RemoteFileSize$ = ({HTTP, options}) => {\n  return HTTP.requestHead(options)\n    .pluck('headers', 'content-length')\n    .map((x) => parseInt(x, 10))\n}\nexport const LocalFileSize$ = ({FILE, fd$}) => {\n  return FILE.fstat(fd$.map(R.of)).pluck('size')\n}\nexport const PickFirst = R.map(first)\nexport const CreateMeta$ = ({size$, options}) => {\n  return size$.map((totalBytes) => {\n    if (!isFinite(totalBytes)) throw new MTDError(FILE_SIZE_UNKNOWN)\n    const threads = SplitRange(totalBytes, options.range)\n    return R.merge(options, {totalBytes, threads, offsets: PickFirst(threads)})\n  })\n}\nexport const ReadFileAt$ = ({FILE, fd$, position$, size = BUFFER_SIZE}) => {\n  const readParams$ = O.combineLatest(position$, fd$)\n  const buffer = CreateFilledBuffer(size)\n  const toParam = ([position, fd]) => [fd, buffer, 0, buffer.length, position]\n  return FILE.read(readParams$.map(toParam))\n}\nexport const MetaPosition$ = ({size$}) => size$.map(R.add(-BUFFER_SIZE))\nexport const CreateWriteBufferAtParams = ({fd$, buffer$, position$}) => {\n  const toParam = ([buffer, fd, position]) => [fd, buffer, 0, buffer.length, position]\n  return O.combineLatest(buffer$, fd$, position$.first()).map(toParam)\n}\nexport const CreateWriteBufferParams = R.compose(\n  O.just,\n  ([fd, buffer, position]) => [fd, buffer, 0, buffer.length, position],\n  R.unnest\n)\nexport const SetMetaOffsets = ({meta$, bufferWritten$}) => {\n  const offsetLens = thread => R.compose(R.lensProp('offsets'), R.lensIndex(thread))\n  const start$ = meta$.map(meta => ({meta, len: 0, thread: 0})).first()\n  const source$ = O.merge(\n    start$,\n    bufferWritten$.map(x => [x[3], x[2]])\n      .map(R.zipObj(['len', 'thread']))\n      .withLatestFrom(meta$.map(R.objOf('meta')))\n      .map(R.mergeAll)\n  )\n\n  const accumulator = (previous, current) => {\n    const thread = current.thread\n    const pMeta = previous.meta\n    const oldVal = pMeta.offsets[thread]\n    const lens = offsetLens(thread)\n    const meta = R.set(lens, R.add(oldVal, current.len), pMeta)\n    return R.merge(current, {meta})\n  }\n  return source$\n    .scan(accumulator)\n    .skip(1)\n    .pluck('meta')\n}\nexport const ReadJSON$ = R.compose(BufferToJS$, Rx.map(second), ReadFileAt$)\nexport const IsOffsetInRange = R.curry((meta, i) => {\n  const start = R.lte(GetThreadStart(meta, i))\n  const end = R.gt(GetThreadEnd(meta, i))\n  const inRange = R.allPass([start, end])\n  return inRange(GetOffset(meta, i))\n})\nexport const FlattenMeta$ = Rx.flatMap((meta) => {\n  const MergeMeta = R.map(R.compose(R.merge({meta}), R.objOf('index')))\n  const IsValid = R.filter(IsOffsetInRange(meta))\n  return MergeMeta(IsValid(TimesCount(GetThreadCount(meta))))\n})\nexport const RxThrottleComplete = (window$, $, sh) => {\n  const selector = window => O.merge($.throttle(window, sh), $.last())\n  return window$.first().flatMap(selector)\n}\nexport const IsCompleted$ = (meta$) => {\n  const offsetsA = R.prop('offsets')\n  const offsetsB = R.compose(R.map(second), R.prop('threads'))\n  const subtract = R.apply(R.subtract)\n  const diff = R.compose(R.all(R.lte(0)), R.map(subtract), R.zip)\n  const isComplete = R.converge(diff, [offsetsA, offsetsB])\n  return meta$.map(isComplete).distinctUntilChanged()\n}\nexport const TapBetween = R.curry((min, max, value) => {\n  return Math.min(max, Math.max(min, value))\n})\n\n/**\n * Util method that calculates the total completion percentage (between 0-100).\n * @function\n * @param {Observable} meta$ Meta data stream ie. exposed by {@link DownloadFromMTDFile}\n * @return {external:Observable} Value between 0-100\n */\nexport const Completion = (meta$) => {\n  const tap0To100 = TapBetween(0, 1)\n  return meta$.map(meta => {\n    const total = meta.totalBytes\n    const downloaded = R.sum(meta.offsets) - R.sum(R.map(R.nth(0), meta.threads)) + R.length(meta.threads) - 1\n    return tap0To100(Math.ceil(downloaded / total * 100) / 100)\n  })\n}\nexport const WriteBuffer = ({FILE, fd$, buffer$}) => {\n  const Write = R.compose(FILE.write, CreateWriteBufferParams)\n  return O.combineLatest(fd$, buffer$)\n    .flatMap(params => {\n      return Write(params).map(R.concat(R.nth(1, params)))\n    })\n}\n/**\n * Makes HTTP requests to start downloading data for each thread described in\n * the meta data.\n * @function\n * @private\n * @param {Object} HTTP - an HTTP transformer\n * @param {function} HTTP.request - an HTTP transformer\n * @param {Observable} meta$ - meta data as a stream\n * @returns {Observable} - muxed stream of responses$ and buffer$\n */\nexport const RequestWithMeta = R.uncurryN(2, (HTTP) => R.compose(\n  Rx.flatMap(RequestThread(HTTP)),\n  FlattenMeta$\n))\n\nexport const DOWNLOAD_TYPES = {\n  NEW: 0,\n  OLD: 1\n}\nexport const RemoveExtension = R.replace(/\\.mtd$/, '')\nexport const GetDownloadType = R.curry((NormalizePath, options$) => {\n  const MergeType = type => R.compose(R.merge({type}), R.objOf('options'))\n  const GetPathFromURL = R.compose(NormalizePath, GenerateFileName, R.prop('url'))\n  const GetPathFromFile = R.compose(NormalizePath, RemoveExtension, R.prop('file'))\n  const GetMtdPathFromPath = R.compose(MTDPath, R.prop('path'))\n  const MetaAssoc = R.curry((prop, T, options) => R.assoc(prop, T(options), options))\n  const setPathFromURL = MetaAssoc('path', GetPathFromURL)\n  const setPathFromFile = MetaAssoc('path', GetPathFromFile)\n  const setMtdPath = MetaAssoc('mtdPath', GetMtdPathFromPath)\n\n  const [ok$, not$] = options$.partition(x => x.url)\n  return O.merge(\n    ok$.map(R.compose(setMtdPath, setPathFromURL)).map(MergeType(DOWNLOAD_TYPES.NEW)),\n    not$.map(R.compose(setMtdPath, setPathFromFile)).map(MergeType(DOWNLOAD_TYPES.OLD))\n  )\n})\nexport const CliValidOptions = R.anyPass([R.has('url'), R.has('file')])\nexport const RxTakeN = R.curry((n$, $) => {\n  const accum = (memory, [value, count]) => {\n    return {list: R.append(value, memory.list), count}\n  }\n  return $.withLatestFrom(n$).scan(accum, {list: []})\n    .filter(({list, count}) => R.equals(R.length(list), count))\n    .pluck('list')\n    .take(1)\n})\n"]}