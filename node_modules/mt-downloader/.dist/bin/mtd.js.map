{"version":3,"sources":["../../src/bin/mtd.js"],"names":["Rx","Log","console","log","bind","LogError","error","LogAlways","message","FlatMapShare","curry","func","$","flatMap","share","Size","meta$","pluck","take","ValidOptions","partition","IsNewDownload","whereEq","type","NEW","DownloadOptions","compose","map","Executor","signal$","size$","completion$","invalidOptions$","validOptions$","merge","msg","subscribe","action","partial","just","flags","shareReplay","new$","resume$","created$","takeLast","mtdFile$","sample","head","downloaded$","fdR$","finalized$","last","fd","meta","fd$","throttle"],"mappings":"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","file":"mtd.js","sourcesContent":["\n/**\n * Created by tushar.mathur on 04/06/16.\n */\n\n'use strict'\nimport meow from 'meow'\nimport R from 'ramda'\nimport {demux, mux} from 'muxer'\nimport {Observable as O} from 'rx'\nimport * as Rx from '../RxFP'\nimport {\n  GetDownloadType,\n  DOWNLOAD_TYPES,\n  CliValidOptions,\n  CreateMTDFile,\n  DownloadFromMTDFile,\n  FinalizeDownload,\n  Completion,\n  BAR\n} from '../index'\nimport {Help, Status} from './Messages'\n\n/**\n * LIB\n */\nexport const Log = console.log.bind(console)\nexport const LogError = console.error.bind(console)\nexport const LogAlways = message => () => Log(message)\nexport const FlatMapShare = R.curry((func, $) => $.flatMap(func).share())\nexport const Size = meta$ => meta$.pluck('totalBytes').take(1)\nexport const ValidOptions = Rx.partition(CliValidOptions)\nexport const IsNewDownload = R.whereEq({type: DOWNLOAD_TYPES.NEW})\nexport const DownloadOptions = R.compose(R.map(Rx.pluck('options')), Rx.partition(IsNewDownload), GetDownloadType)\nexport const Executor = (signal$) => {\n  const [{size$, completion$, invalidOptions$, validOptions$}] = demux(\n    signal$, 'size$', 'completion$', 'invalidOptions$', 'validOptions$'\n  )\n  O.merge(\n    validOptions$.take(1).map(msg => [msg, LogAlways('\\nStarting...')]),\n    size$.map(msg => [msg, R.compose(Log, Status)]),\n    invalidOptions$.map(msg => [msg, LogAlways(Help)]),\n    completion$.map(msg => [msg, BAR])\n  ).subscribe(\n    ([msg, action]) => action(msg),\n    R.partial(LogError, ['Failure']), R.partial(Log, ['Complete'])\n  )\n}\n\nconst [validOptions$, invalidOptions$] = ValidOptions(O.just(meow(Help).flags).shareReplay(1))\nconst [new$, resume$] = DownloadOptions(validOptions$)\nconst created$ = FlatMapShare(CreateMTDFile, new$).takeLast(1)\nconst mtdFile$ = O.merge(resume$, Rx.sample([new$], created$).map(R.head)).pluck('mtdPath')\nconst downloaded$ = FlatMapShare(DownloadFromMTDFile, mtdFile$)\nconst [{fdR$, meta$}] = demux(downloaded$, 'meta$', 'fdR$')\nconst finalized$ = FlatMapShare(\n  FinalizeDownload,\n  Rx.sample([fdR$, meta$], downloaded$.last()).map(\n    ([fd, meta]) => ({fd$: O.just(fd), meta$: O.just(meta)})\n  ).last()\n)\nconst completion$ = Completion(meta$.throttle(1000))\nconst size$ = Size(meta$)\nExecutor(mux({finalized$, size$, completion$, invalidOptions$, validOptions$}))\n"]}