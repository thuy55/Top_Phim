{"version":3,"sources":["../src/RxFP.js"],"names":["map","curry","func","$","flatMap","withLatestFrom","list","zip","zipWith","filter","distinctUntilChanged","pluck","path","scan","scanWith","m","shareReplay","count","repeat","value","trace","msg","tap","x","console","log","share","partition","first","subscribe","observer","sample","a$$","b$","tail"],"mappings":"AAAA;;;;AAIA;;;;;;;AAEA;;;;AACA;;;;AACO,MAAMA,oBAAM,gBAAEC,KAAF,CAAQ,CAACC,IAAD,EAAOC,CAAP,KAAaA,EAAEH,GAAF,CAAME,IAAN,CAArB,CAAZ;AACA,MAAME,4BAAU,gBAAEH,KAAF,CAAQ,CAACC,IAAD,EAAOC,CAAP,KAAaA,EAAEC,OAAF,CAAUF,IAAV,CAArB,CAAhB;AACA,MAAMG,0CAAiB,gBAAEJ,KAAF,CAAQ,CAACK,IAAD,EAAOH,CAAP,KAAaA,EAAEE,cAAF,CAAiB,GAAGC,IAApB,CAArB,CAAvB;AACA,MAAMC,oBAAM,gBAAEN,KAAF,CAAQ,CAACK,IAAD,EAAOH,CAAP,KAAaA,EAAEI,GAAF,CAAM,GAAGD,IAAT,CAArB,CAAZ;AACA,MAAME,4BAAU,gBAAEP,KAAF,CAAQ,CAACC,IAAD,EAAOI,IAAP,EAAaH,CAAb,KAAmBA,EAAEI,GAAF,CAAM,GAAGD,IAAT,EAAeJ,IAAf,CAA3B,CAAhB;AACA,MAAMO,0BAAS,gBAAER,KAAF,CAAQ,CAACC,IAAD,EAAOC,CAAP,KAAaA,EAAEM,MAAF,CAASP,IAAT,CAArB,CAAf;AACA,MAAMQ,sDAAuBP,KAAKA,EAAEO,oBAAF,EAAlC;AACA,MAAMC,wBAAQ,gBAAEV,KAAF,CAAQ,CAACW,IAAD,EAAOT,CAAP,KAAaA,EAAEQ,KAAF,CAAQC,IAAR,CAArB,CAAd;AACA,MAAMC,sBAAO,gBAAEZ,KAAF,CAAQ,CAACC,IAAD,EAAOC,CAAP,KAAaA,EAAEU,IAAF,CAAOX,IAAP,CAArB,CAAb;AACA,MAAMY,8BAAW,gBAAEb,KAAF,CAAQ,CAACC,IAAD,EAAOa,CAAP,EAAUZ,CAAV,KAAgBA,EAAEU,IAAF,CAAOX,IAAP,EAAaa,CAAb,CAAxB,CAAjB;AACA,MAAMC,oCAAc,gBAAEf,KAAF,CAAQ,CAACgB,KAAD,EAAQd,CAAR,KAAcA,EAAEa,WAAF,CAAcC,KAAd,CAAtB,CAApB;AACA,MAAMC,0BAAS,gBAAEjB,KAAF,CAAQ,CAACkB,KAAD,EAAQF,KAAR,KAAkB,eAAEC,MAAF,CAASC,KAAT,EAAgBF,KAAhB,CAA1B,CAAf;AACA,MAAMG,wBAAQ,gBAAEnB,KAAF,CAAQ,CAACoB,GAAD,EAAMlB,CAAN,KAAYA,EAAEmB,GAAF,CAAMC,KAAKC,QAAQC,GAAR,CAAYJ,GAAZ,EAAiBE,CAAjB,CAAX,CAApB,CAAd;AACA,MAAMD,oBAAM,gBAAErB,KAAF,CAAQ,CAACC,IAAD,EAAOC,CAAP,KAAaA,EAAEmB,GAAF,CAAMpB,IAAN,CAArB,CAAZ;AACA,MAAMwB,wBAASvB,CAAD,IAAOA,EAAEuB,KAAF,EAArB;AACA,MAAMC,gCAAY,gBAAE1B,KAAF,CAAQ,CAACC,IAAD,EAAOC,CAAP,KAAaA,EAAEwB,SAAF,CAAYzB,IAAZ,CAArB,CAAlB;AACA,MAAM0B,wBAAQzB,KAAKA,EAAEyB,KAAF,EAAnB;AACA,MAAMC,gCAAY,gBAAE5B,KAAF,CAAQ,CAAC6B,QAAD,EAAW3B,CAAX,KAAiBA,EAAE0B,SAAF,CAAYC,QAAZ,CAAzB,CAAlB;AACA,MAAMC,0BAAS,gBAAE9B,KAAF,CAAQ,CAAC+B,GAAD,EAAMC,EAAN,KAAaA,GAAG5B,cAAH,CAAkB,GAAG2B,GAArB,EAA0BhC,GAA1B,CAA8B,gBAAEkC,IAAhC,CAArB,CAAf","file":"RxFP.js","sourcesContent":["/**\n * Created by tushar.mathur on 10/06/16.\n */\n\n'use strict'\n\nimport R from 'ramda'\nimport {Observable as O} from 'rx'\nexport const map = R.curry((func, $) => $.map(func))\nexport const flatMap = R.curry((func, $) => $.flatMap(func))\nexport const withLatestFrom = R.curry((list, $) => $.withLatestFrom(...list))\nexport const zip = R.curry((list, $) => $.zip(...list))\nexport const zipWith = R.curry((func, list, $) => $.zip(...list, func))\nexport const filter = R.curry((func, $) => $.filter(func))\nexport const distinctUntilChanged = $ => $.distinctUntilChanged()\nexport const pluck = R.curry((path, $) => $.pluck(path))\nexport const scan = R.curry((func, $) => $.scan(func))\nexport const scanWith = R.curry((func, m, $) => $.scan(func, m))\nexport const shareReplay = R.curry((count, $) => $.shareReplay(count))\nexport const repeat = R.curry((value, count) => O.repeat(value, count))\nexport const trace = R.curry((msg, $) => $.tap(x => console.log(msg, x)))\nexport const tap = R.curry((func, $) => $.tap(func))\nexport const share = ($) => $.share()\nexport const partition = R.curry((func, $) => $.partition(func))\nexport const first = $ => $.first()\nexport const subscribe = R.curry((observer, $) => $.subscribe(observer))\nexport const sample = R.curry((a$$, b$) => b$.withLatestFrom(...a$$).map(R.tail))\n"]}