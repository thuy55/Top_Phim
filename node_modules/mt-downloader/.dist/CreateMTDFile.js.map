{"version":3,"sources":["../src/CreateMTDFile.js"],"names":["CreateMTDFile","curry","FILE","HTTP","options","fd$","open","just","mtdPath","size$","meta$","written$","write","buffer$","position$","remoteFileSize$","fdW$"],"mappings":"AAAA;;;;AAIA;;;;;;;AACA;;AACA;;;;AACA;;AACA;;;;AAOA;;;;;;;;;;;;;;;;;AAiBO,MAAMA,wCAAgB,gBAAEC,KAAF,CAAQ,CAAC,EAACC,IAAD,EAAOC,IAAP,EAAD,EAAeC,OAAf,KAA2B;AAC9D;;;AAGA,QAAMC,MAAMH,KAAKI,IAAL,CAAU,eAAEC,IAAF,CAAO,CAACH,QAAQI,OAAT,EAAkB,GAAlB,CAAP,CAAV,CAAZ;;AAEA;;;AAGA,QAAMC,QAAQ,4BAAgB,EAACN,IAAD,EAAOC,OAAP,EAAhB,CAAd;;AAEA;;;AAGA,QAAMM,QAAQ,wBAAY,EAACN,OAAD,EAAUK,KAAV,EAAZ,CAAd;;AAEA;;;AAGA,QAAME,WAAWT,KAAKU,KAAL,CAAW,sCAA0B;AACpDV,QADoD;AAEpDG,SAAKA,GAF+C;AAGpDQ,aAAS,wBAAYH,KAAZ,CAH2C;AAIpDI,eAAWL;AAJyC,GAA1B,CAAX,CAAjB;AAMA,SAAO,gBAAI,EAACE,QAAD,EAAWD,KAAX,EAAkBK,iBAAiBN,KAAnC,EAA0CO,MAAMX,GAAhD,EAAJ,CAAP;AACD,CA1B4B,CAAtB","file":"CreateMTDFile.js","sourcesContent":["/**\n * Created by tushar.mathur on 29/06/16.\n */\n\n'use strict'\nimport {mux} from 'muxer'\nimport R from 'ramda'\nimport {Observable as O} from 'rx'\nimport {\n  RemoteFileSize$,\n  CreateMeta$,\n  CreateWriteBufferAtParams,\n  JSToBuffer$\n} from './Utils'\n\n/**\n * Creates a new .mtd file that is a little larger in size than the original\n * file. The file is initially empty and has all the relevant meta\n * information regarding the download appended to the end.\n * @function\n * @param {object} options - The `options` must have `mtdPath` and `url`.\n * @param {string} options.url - Download url.\n * @param {string} options.path - Relative path where the file needs to be saved.\n * @param {number} [options.range=3] - Number of concurrent downloads.\n * @param {number} [options.metaWrite=300] - Throttles the write frequency of meta data.\n * @return {external:Observable}\n * A {@link https://github.com/tusharmath/muxer multiplexed stream} containing ~\n * - `written$` - Bytes being saved on disk.\n * - `meta$` - Meta information about the download.\n * - `remoteFileSize$` - Size of the content that is to be downloaded.\n * - `fdW$` - File descriptor in `w` mode.\n */\nexport const CreateMTDFile = R.curry(({FILE, HTTP}, options) => {\n  /**\n   * Create a new file\n   */\n  const fd$ = FILE.open(O.just([options.mtdPath, 'w']))\n\n  /**\n   * Retrieve file size on remote server\n   */\n  const size$ = RemoteFileSize$({HTTP, options})\n\n  /**\n   * Create initial meta data\n   */\n  const meta$ = CreateMeta$({options, size$})\n\n  /**\n   * Create a new file with meta info appended at the end\n   */\n  const written$ = FILE.write(CreateWriteBufferAtParams({\n    FILE,\n    fd$: fd$,\n    buffer$: JSToBuffer$(meta$),\n    position$: size$\n  }))\n  return mux({written$, meta$, remoteFileSize$: size$, fdW$: fd$})\n})\n"]}